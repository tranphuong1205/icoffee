import { Generated, Insertable, Selectable, Updateable } from 'kysely';

export interface Database {
  post: PostTable;
  category: CategoryTable;
  comment: CommentTable;
  user: UserTable;
}
export interface PostTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;

  name: string;
  price: number;

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  flavor: string;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  materials: string;
  making: string;
  image: string;
  categoryId: number;
  sameCourseId:number;

  // You can specify JSON columns using the `JSONColumnType` wrapper.
  // It is a shorthand for `ColumnType<T, string, string>`, where T
  // is the type of the JSON object/array retrieved from the database,
  // and the insert and update types are always `string` since you're
  // always stringifying insert/update values.
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type Post = Selectable<PostTable>;
export type NewPost = Insertable<PostTable>;
export type PostUpdate = Updateable<PostTable>;

export interface CategoryTable {
  id: Generated<number>;
  name: string;
}

export type Category = Selectable<CategoryTable>;
export type NewCategory = Insertable<CategoryTable>;
export type CategoryUpdate = Updateable<CategoryTable>;

export interface CommentTable {
  id: Generated<number>;
  userId: number;
  userName: number;
  postId: number;
  description: string;
}

export type Comment = Selectable<CommentTable>;
export type NewComment = Insertable<CommentTable>;
export type CommentUpdate = Updateable<CommentTable>;

export interface UserTable {
  id: Generated<number>;
  name: string;
  email: string;
  password: string;
}

export type User = Selectable<UserTable>;
export type NewUser = Insertable<UserTable>;
export type UserUpdate = Updateable<UserTable>;

export interface LikeTable {
  userId: number;
  postId: number;
}

export type Like = Selectable<LikeTable>;
export type NewLike = Insertable<LikeTable>;
export type LikeUpdate = Updateable<LikeTable>;

export interface AuthRefreshTokenTable {
  id: Generated<number>;
  value: string;
  userId: number;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export type AuthRefreshToken = Selectable<AuthRefreshTokenTable>;
export type NewAuthRefreshToken = Insertable<AuthRefreshTokenTable>;
export type AuthRefreshTokenUpdate = Updateable<AuthRefreshTokenTable>;
